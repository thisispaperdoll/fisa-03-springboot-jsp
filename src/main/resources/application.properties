
#jpa setting
#spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

#db setting
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost/hello2?serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=0000

# ??? data.sql? ??? ???? ??
#spring.sql.init.mode=always
spring.sql.init.data-locations=classpath:data.sql

#view
spring.mvc.view.prefix=/WEB-INF/view/
spring.mvc.view.suffix=.jsp
server.error.whitelabel.enabled=false
# JSP
spring.mvc.view.cache=false

# # File
spring.servlet.multipart.enabled=true
#upload.path=C:/ITStudy/14_SpringBoot/demo-final/src/main/webapp/test/
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# 1. resouces/static 아래 있는 css / boostrap 홈페이지에서 가져온 js /css 파일을 전체 서비스에 적용
# 2. DB Connection을 .env로 이동하고 공유db의 본인 이름으로 된 스키마로 이전
# 3. 사용자 id 로그 가져올 수 없는 부분에서 사용하기 위해 session 혹은 cookie에 userId 삽입

# s3 bucket
aws.s3.endpoint=${endpoint}
aws.s3.region=${region}
aws.s3.access-key=${access-key}
aws.s3.secret-key=${secret-key}


# logging trace < debug < info < warn < error < fatal - 특별히 설정하지 않으면 info
# 로그를 기록할 레벨 순서
#logging.level.root=info

# 로그를 각 패키지마다 다른 순서로 가져올 수도 있습니다.
logging.level.com.example.demo.controller=debug
logging.level.com.example.demo.service=error 

# 로그파일을 유지할 개수
logging.logback.rollingpolicy.max-history=30
# 로그파일 1개의 최대 용량
logging.logback.rollingpolicy.max-file-size=100MB
# 로그파일 이름
logging.file.name=logs/demo.log
# 로그파일이 설정한 용량을 초과하거나 날짜가 변경될 경우 새로 만들어질 파일명
logging.logback.rollingpolicy.file-name-pattern=${LOG_FILE}.%d{yyyy-MM-dd}-%i.log
# 로그파일에서 사용할 날짜 시간 형식과 타임존
logging.pattern.dateformat=yyyy-MM-dd HH:mm:ss.SSS,Asia/Seoul

# server.tomcat.remote-ip-header=x-forwarded-for
# server.tomcat.protocol-header=x-forwarded-proto
